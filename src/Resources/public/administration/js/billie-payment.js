(this.webpackJsonp=this.webpackJsonp||[]).push([["billie-payment"],{"4lSF":function(e,t){e.exports='{% block billie_test_credentials_button %}\n    <div class="billie-test-credentials-button">\n        {% block billie_test_credentials_button_process_button %}\n            <sw-button-process\n                class="billie-test-credentials-button__process-button"\n                :isLoading="isLoading"\n                :processSuccess="isTestSuccessful"\n                :disabled="isLoading"\n                @click.prevent="onClick"\n                @process-finish="onTestFinish"\n                block>\n                {{ $tc(\'billie.config.testCredentialsButton.text\') }}\n            </sw-button-process>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},AgdC:function(e,t){e.exports='{% block sw_settings_payment_detail_content_card %}\n    {% parent %}\n\n    {% block billie_payment_config_content %}\n        <sw-card v-if="paymentMethod && paymentMethod.extensions.billieConfig != null"\n                 class="billie--payment-config--card"\n                 :title="$tc(\'billie.paymentConfig.card.title\')"\n                 :isLoading="isLoading">\n            <template v-if="!isLoading">\n\n                {% block billie_payment_config_fields %}\n                    <sw-field\n                        type="number"\n                        :label="$tc(\'billie.paymentConfig.fields.duration.label\')"\n                        v-model="paymentMethod.extensions.billieConfig.duration"\n                        min="1">\n                    </sw-field>\n                {% endblock %}\n            </template>\n        </sw-card>\n    {% endblock %}\n{% endblock %}\n'},Qvyn:function(e,t,i){"use strict";i.r(t);const n=Shopware.Classes.ApiService;class s extends n{constructor(e,t,i="billie"){super(e,t,i),this.name="billieApiService"}testCredentials(e,t,i){return this.httpClient.post(`${this.getApiBasePath()}/test-credentials`,{id:e,secret:t,isSandbox:i},{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}}Shopware.Application.addServiceProvider("billieApiService",()=>{const e=Shopware.Application.getContainer("factory"),t=Shopware.Application.getContainer("init"),i=e.apiService,n=new s(t.httpClient,Shopware.Service("loginService")),o=n.name;return i.register(o,n),n});var o=i("AgdC"),r=i.n(o);const{Component:c}=Shopware;c.override("sw-settings-payment-detail",{template:r.a});var a=i("4lSF"),l=i.n(a),d=i("dYE1"),p=i("Z4r5");const{Component:g,Mixin:h}=Shopware;g.register("billie-test-credentials-button",{template:l.a,inject:["billieApiService"],mixins:[h.getByName("notification")],snippets:{"de-DE":d,"en-GB":p},data:()=>({isLoading:!1,isTestSuccessful:!1,currentConfig:null}),created(){this.createdComponent()},destroyed(){this.destroyedComponent()},methods:{createdComponent(){this.$parent.$parent.$parent.$on("config-changed",this.onConfigChanged)},destroyedComponent(){this.$parent.$parent.$parent.$off("config-changed")},onConfigChanged(e){this.currentConfig=e},onClick(){this.testCredentials()},onTestFinish(){this.isTestSuccessful=!1},testCredentials(){this.isTestSuccessful=!1,this.isLoading=!0;let e=this.currentConfig?this.currentConfig["BilliePayment.config.clientId"]:null,t=this.currentConfig?this.currentConfig["BilliePayment.config.clientSecret"]:null,i=this.currentConfig?this.currentConfig["BilliePayment.config.sandbox"]:null;this.billieApiService.testCredentials(e,t,i).then(e=>{this.isLoading=!1,e.success?(this.isTestSuccessful=!0,this.createNotificationSuccess({message:this.$tc("billie.config.notification.correctCredentials")})):this.createNotificationError({message:this.$tc("billie.config.notification.incorrectCredentials")})}).catch(()=>{this.isLoading=!1,this.createNotificationError({message:this.$tc("billie.config.notification.failedToTestCredentials")})})}}})},Z4r5:function(e){e.exports=JSON.parse('{"billie":{"config":{"testCredentialsButton":{"text":"Test credentials"},"notification":{"correctCredentials":"The credentials are correct!","incorrectCredentials":"The credentials are unfortunately wrong!","failedToTestCredentials":"An error occurred while checking the credentials!"}}}}')},dYE1:function(e){e.exports=JSON.parse('{"billie":{"config":{"testCredentialsButton":{"text":"Zugangsdaten testen"},"notification":{"correctCredentials":"Die Zugangsdaten sind korrekt!","incorrectCredentials":"Die Zugangsdaten sind leider falsch!","failedToTestCredentials":"Beim Pr√ºfen der Zugangsdaten ist ein Fehler aufgetreten!"}}}}')}},[["Qvyn","runtime"]]]);